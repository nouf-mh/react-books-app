{"ast":null,"code":"let token = localStorage.token;\n\nif (!token) {\n  token = localStorage.token = Math.random().toString(36).substr(-8);\n}\n\nconst url = \"https://reactnd-books-api.udacity.com\";\nconst headers = {\n  Authorization: token,\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n}; // Get All books with any shelf status but none\n\nexport const getAllBooks = async () => {\n  const res = await fetch(`${url}/books/`, {\n    headers\n  });\n  const data = await res.json();\n  return data.books;\n}; // Get One Book by ID\n\nexport const getOneBook = async id => {\n  const res = await fetch(`${url}/books/${id}`, {\n    headers\n  });\n  const data = await res.json();\n  return data.book;\n}; // Update book's shelf\n\nexport const updateBook = async (id, shelf) => {\n  const res = await fetch(`${url}/books/${id}`, {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({\n      shelf\n    })\n  });\n  return await res.json();\n}; // Search for a book by title or author\n\nexport const searchBook = async string => {\n  const res = await fetch(`${url}/search`, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      query: string\n    })\n  });\n  const data = await res.json();\n  return data.books;\n};","map":{"version":3,"sources":["/Users/nouf/Desktop/My projects/React/books-app/NReads/src/Api.js"],"names":["token","localStorage","Math","random","toString","substr","url","headers","Authorization","Accept","getAllBooks","res","fetch","data","json","books","getOneBook","id","book","updateBook","shelf","method","body","JSON","stringify","searchBook","string","query"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,YAAY,CAACD,KAAzB;;AACA,IAAI,CAACA,KAAL,EAAY;AACVA,EAAAA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B;AACD;;AAED,MAAMC,GAAG,GAAG,uCAAZ;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,aAAa,EAAER,KADD;AAEdS,EAAAA,MAAM,EAAE,kBAFM;AAGd,kBAAgB;AAHF,CAAhB,C,CAMA;;AACA,OAAO,MAAMC,WAAW,GAAG,YAAY;AACrC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEN,GAAI,SAAR,EAAkB;AAAEC,IAAAA;AAAF,GAAlB,CAAvB;AACA,QAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,SAAOD,IAAI,CAACE,KAAZ;AACD,CAJM,C,CAKP;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,EAAP,IAAc;AACtC,QAAMN,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEN,GAAI,UAASW,EAAG,EAApB,EAAuB;AAAEV,IAAAA;AAAF,GAAvB,CAAvB;AACA,QAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,SAAOD,IAAI,CAACK,IAAZ;AACD,CAJM,C,CAMP;;AACA,OAAO,MAAMC,UAAU,GAAG,OAAOF,EAAP,EAAWG,KAAX,KAAqB;AAC7C,QAAMT,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEN,GAAI,UAASW,EAAG,EAApB,EAAuB;AAC5CI,IAAAA,MAAM,EAAE,KADoC;AAE5Cd,IAAAA,OAF4C;AAG5Ce,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEJ,MAAAA;AAAF,KAAf;AAHsC,GAAvB,CAAvB;AAKA,SAAO,MAAMT,GAAG,CAACG,IAAJ,EAAb;AACD,CAPM,C,CASP;;AACA,OAAO,MAAMW,UAAU,GAAG,MAAOC,MAAP,IAAkB;AAC1C,QAAMf,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEN,GAAI,SAAR,EAAkB;AACvCe,IAAAA,MAAM,EAAE,MAD+B;AAEvCd,IAAAA,OAFuC;AAGvCe,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEG,MAAAA,KAAK,EAAED;AAAT,KAAf;AAHiC,GAAlB,CAAvB;AAKA,QAAMb,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,SAAOD,IAAI,CAACE,KAAZ;AACD,CARM","sourcesContent":["let token = localStorage.token;\nif (!token) {\n  token = localStorage.token = Math.random().toString(36).substr(-8);\n}\n\nconst url = \"https://reactnd-books-api.udacity.com\";\n\nconst headers = {\n  Authorization: token,\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n};\n\n// Get All books with any shelf status but none\nexport const getAllBooks = async () => {\n  const res = await fetch(`${url}/books/`, { headers });\n  const data = await res.json();\n  return data.books;\n};\n// Get One Book by ID\nexport const getOneBook = async (id) => {\n  const res = await fetch(`${url}/books/${id}`, { headers });\n  const data = await res.json();\n  return data.book;\n};\n\n// Update book's shelf\nexport const updateBook = async (id, shelf) => {\n  const res = await fetch(`${url}/books/${id}`, {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({ shelf }),\n  });\n  return await res.json();\n};\n\n// Search for a book by title or author\nexport const searchBook = async (string) => {\n  const res = await fetch(`${url}/search`, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({ query: string }),\n  });\n  const data = await res.json();\n  return data.books;\n};\n"]},"metadata":{},"sourceType":"module"}